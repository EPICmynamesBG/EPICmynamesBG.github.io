function GridStyle(){}var app=angular.module("app",["ui.router","ngAnimate"]);app.run(function($rootScope,$state,$timeout,$preload){$rootScope.endAnimation=!1,$timeout(function(){$rootScope.endAnimation=!0},3300),$rootScope.$state=$state,$rootScope.loading=!1,$rootScope.modalData={},$(".button-collapse").sideNav({closeOnClick:!0}),$preload.loadAll().then(function(success){console.log("Preload",success)},function(error){console.log("Preload",error)}),$rootScope.$on("$stateChangeStart",function(evt,to,params){to.redirectTo&&(evt.preventDefault(),$state.go(to.redirectTo,params,{location:"replace"}))})}),app.config(function($stateProvider,$urlRouterProvider,$locationProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!0}),$urlRouterProvider.otherwise("/"),$stateProvider.state("Home",{url:"/",templateUrl:"views/home.html",controller:"HomeController",data:{}}).state("About",{url:"/about",templateUrl:"views/about.html",controller:"AboutController",data:{}}).state("Experience",{url:"/experience",templateUrl:"views/experience.html",controller:"ExperienceController",data:{}}).state("Projects",{url:"/projects",templateUrl:"views/projects.html",controller:"ProjectsController",redirectTo:"Projects.All",data:{}}).state("Projects.All",{parent:"Projects",project:"/all",url:"/all?style",templateUrl:"views/projects/all.html",controller:"ProjectsAllController",data:{}}).state("Projects.Detail",{parent:"Projects",url:"/:projectName",templateUrl:"views/projects/details.html",controller:"ProjectsDetailsController",data:{}})}),app.controller("AboutController",function($scope,$json){$json.loadFile("information/general").success(function(data){$scope.generalInfo=data}).error(function(error){console.log(error)})}),app.controller("ExperienceController",function($scope,$json){$json.loadFile("information/work").success(function(data){$scope.workHistory=data,$(".collapsible").collapsible()}).error(function(error){console.log(error)})}),app.controller("HomeController",function($scope){}),app.controller("NavController",function($scope){$(".button-collapse").sideNav({closeOnClick:!0})}),app.controller("ProjectsAllController",function($scope,$json,$stateParams,$state){$stateParams.style&&""!=$stateParams.style||($stateParams.style="tiles",$state.go("Projects.All",{style:$stateParams.style},{notify:!1,location:"replace"})),$scope.gridStyle=$stateParams.style,$json.loadFile("projects").success(function(data){$scope.projectList=data}).error(function(error){console.log(error)}),$scope.$watch("gridStyle",function(newVal,oldVal){newVal!=oldVal&&$state.go("Projects.All",{style:newVal},{notify:!1,location:"replace"})})}),app.controller("ProjectsController",function($scope,$json){}),app.controller("ProjectsDetailsController",function($scope,$stateParams,$json,$sce){var title=$json.formatTitle($stateParams.projectName);$json.loadFile("projects/"+title).then(function(response){$scope.project=response.data},function(response){$json.errorResponse(response)})}),app.filter("rawHtml",["$sce",function($sce){return function(val){return $sce.trustAsHtml(val)}}]),app.directive("backToTop",function(){return{restrict:"E",replace:!0,scope:{},template:'<div id="goToTop" class="btn btn-floating waves-effect waves-light" ng-click="toTop()"><i class="material-icons">keyboard_arrow_up</i></div>',link:function(scope,element,attrs){$(window).scroll(function(){$(this).scrollTop()>100?element.addClass("show"):element.removeClass("show")}),scope.toTop=function(){return $("html, body").animate({scrollTop:0},600),!1}}}}),app.directive("carousel",function($interval){return{restrict:"A",replace:!0,scope:{imageArray:"="},templateUrl:"./views/directives/carousel.html",link:function(scope,element,attrs){var self=this;scope.paused=!1,scope.carouselIndex=0;var carouselTime=4500,init=function(){self.carousel&&$interval.cancel(self.carousel),self.carousel=$interval(function(){scope.paused||(scope.carouselIndex+=1,scope.imageArray.length==scope.carouselIndex&&(scope.carouselIndex=0))},carouselTime)};scope.$watch("imageArray",function(newValue){newValue&&init()}),scope.togglePlayback=function(){scope.paused=!scope.paused}}}}),GridStyle.List="list",GridStyle.Tiles="grid",app.directive("grid",function(){return{restrict:"E",replace:!0,transclude:!1,scope:{data:"=",gridStyle:"="},templateUrl:"./views/directives/grid.html",link:function(scope,element,attrs){scope.gridStyle||(scope.gridStyle=GridStyle.Tiles),scope.setStyle=function(newStyle){scope.gridStyle=newStyle}}}}),app.directive("gridList",function(){return{restrict:"E",replace:!0,scope:{project:"="},templateUrl:"./views/directives/grid-list.html",link:function(scope,element,attrs){}}}),app.directive("gridTile",function(){return{restrict:"E",replace:!0,scope:{project:"="},templateUrl:"./views/directives/grid-tile.html",link:function(scope,element,attrs){}}}),app.directive("mAppLoading",function($animate,$rootScope){function link(scope,element,attributes){$animate.enabled(!0),$rootScope.$watch("endAnimation",function(newVal){newVal&&$animate.leave(element.children().eq(1)).then(function(){element.remove(),scope=element=attributes=null})})}return{link:link,restrict:"C"}}),app.directive("navigation",function(){return{restrict:"E",transclude:!1,scope:{project:"="},templateUrl:"./views/directives/navigation.html",link:function(scope,element,attrs){},controller:"NavController"}}),app.service("$json",function($http){var location="json/",toTitleCase=function(str){return str.replace(/\w\S*/g,function(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase()})};this.formatTitle=function(title){var temp=toTitleCase(title);return temp=temp.replace(/ /g,""),temp=temp.replace("(",""),temp=temp.replace(")",""),temp=temp.replace(/-/g,"")},this.loadFile=function(filename){return $http.get(location+filename+".json")},this.errorResponse=function(error){alert("An error occured loading the remote data. Please reload the page to try again."),console.log(error)}}),app.service("$preload",function($templateCache,$http){var views=["about","experience","home","projects","directives/carousel","directives/grid-list","directives/grid-tile","directives/grid","directives/navigation","projects/all","projects/details"],json=["information/general","information/work","projects"],projJson=["projects/AsteroidBlaster","projects/CharlieEatsWorms","projects/Godex","projects/Hackolantern","projects/Inbetween","projects/PlexmediaServer","projects/Pokemondb","projects/SimpleStudentDb","projects/Skbutton","projects/VirtualCommencementAdmin","projects/Wifiusb"],loadImages=function(jsonFile){for(var promArray=[],i=0;i<jsonFile.images.length;i++){var url=jsonFile.images[i],prom=$http.get("/assets/projects/"+url);promArray.push(prom)}return Promise.all(promArray)};this.loadAll=function(){var masterProm=new Promise(function(resolve,reject){for(var promArray=[],i=0;i<views.length;i++){var thisdir=views[i],prom=$http.get("views/"+thisdir+".html");promArray.push(prom)}for(var i=0;i<projJson.length;i++){var thisdir=projJson[i],prom=new Promise(function(resolve,reject){$http.get("json/"+thisdir+".json").then(function(response){var imgProm=loadImages(response.data);imgProm.then(function(values){values.push(response),resolve(values)},function(err){reject(err)})},function(error){reject(error)})});promArray.push(prom)}for(var i=0;i<json.length;i++){var thisdir=json[i],prom=$http.get("json/"+thisdir+".json");promArray.push(prom)}Promise.all(promArray).then(function(values){values.forEach(function(response){Array.isArray(response)?response.forEach(function(innerResponse){$templateCache.put(innerResponse.config.url,innerResponse.data)}):$templateCache.put(response.config.url,response.data)}),resolve("Success")},function(err){console.log(err),resolve(err)})});return masterProm}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
